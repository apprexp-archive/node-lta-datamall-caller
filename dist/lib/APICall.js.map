{"version":3,"sources":["lib/APICall.ts"],"names":["rp","require","url_1","APICall","_a","fullApiResponseFormat","apiAccountKey","apiDataset","_b","apiResponseFormat","apiParams","_this","this","_apiBaseURL","URL","href","_apiDatasetURL","indexOf","rpOptions","url","headers","AccountKey","accept","qs","json","then","body","_response","catch","err","Error","Object","defineProperty","prototype","exports","default"],"mappings":"oEAAA,IAAAA,GAAAC,QAAA,0BACAC,MAAAD,QAAA,OAKAE,QAAA,WAkBI,SAAAA,EAAYC,OAIJC,EAJKC,EAAAF,EAAAE,cAAeC,EAAAH,EAAAG,WAAYC,EAAAJ,EAAAK,kBAAAA,OAAA,IAAAD,EAAA,OAAAA,EAA4BE,EAAAN,EAAAM,UAApEC,EAAAC,KAhBiBA,KAAAC,YAAc,IAAIX,MAAAY,IAAI,oDAAoDC,KAiBvFH,KAAKI,eAAiB,IAAId,MAAAY,IAAIP,EAAYK,KAAKC,aAAaE,MAMC,EAAzD,CAAC,OAAO,WAAY,OAAOE,QAAQR,IAElCJ,EAAwB,eAGA,OAArBI,IACAJ,GAAyB,SAI7BA,GAAyBI,GAIzBJ,EAAwBI,EAG5B,IAAIS,EAAY,CACZC,IAAKP,KAAKI,eACVI,QAAS,CACLC,WAAYf,EACZgB,OAAQjB,GAEZkB,GAAIb,EACJc,OAAOnB,GAGXL,GAAGkB,GACEO,KAAK,SAACC,GACHf,EAAKgB,UAAYD,IAEpBE,MAAM,SAACC,GACJ,MAAM,IAAIC,MAAMD,KAGxBjB,KAAKe,UAAY3B,GAAGkB,GAE5B,OApDIa,OAAAC,eAAI7B,EAAA8B,UAAA,WAAQ,KAAZ,WACI,OAAOrB,KAAKe,2CAmDpBxB,EA9DA,GAgEA+B,QAAAC,QAAehC","file":"APICall.js","sourcesContent":["import * as rp from 'request-promise-native';\nimport { URL } from 'url';\n\n/**\n * Class representing an LTA Datamall2 API call.\n */\nclass APICall {\n    /** LTA Datamall2 API base URL. */\n    private readonly _apiBaseURL = new URL('http://datamall2.mytransport.sg/ltaodataservice/').href;\n\n    /** LTA Datamall2 API dataset URL */\n    private readonly _apiDatasetURL: string;\n\n    /** LTA Datamall2 API response. */\n    private _response: rp.RequestPromise;\n\n    get response(): rp.RequestPromise {\n        return this._response;\n    }\n\n    /**\n     * @param apiAccountKey LTA Datamall2 API account key.\n     * @param apiDataset    LTA Datamall2 API dataset name.\n    */\n    constructor({apiAccountKey, apiDataset, apiResponseFormat = 'json', apiParams}: APIConstructorArgs) {\n        this._apiDatasetURL = new URL(apiDataset, this._apiBaseURL).href;\n\n        /* Initialize fullApiResponseFormat */\n        let fullApiResponseFormat: string;\n\n        /* Check if apiResponseFormat is normal shorthand */\n        if (['json','atom+xml', 'xml'].indexOf(apiResponseFormat) > -1) {\n            /* Initialize the basic form of fullApiResponseFormat */\n             fullApiResponseFormat = 'application/';\n\n            /* Check if apiResponseFormat is missing 'atom+' prefix */\n            if (apiResponseFormat == 'xml') {\n                fullApiResponseFormat += 'atom+'\n            }\n\n            /* Add the shorthand apiResponseFormat to fullApiResponseFormat */\n            fullApiResponseFormat += apiResponseFormat;\n        }\n        /* Otherwise, if apiResponseFormat is complete, simply pass it to fullAPIResponseFormat */\n        else {\n            fullApiResponseFormat = apiResponseFormat;\n        }\n\n        let rpOptions = {\n            url: this._apiDatasetURL,\n            headers: {\n                AccountKey: apiAccountKey,\n                accept: fullApiResponseFormat\n            },\n            qs: apiParams,\n            json: (fullApiResponseFormat ? true : false)\n        }\n\n        rp(rpOptions)\n            .then((body) => {\n                this._response = body;\n            })\n            .catch((err) => {\n                throw new Error(err);\n            })\n\n        this._response = rp(rpOptions);\n    }\n}\n\nexport default APICall;"]}